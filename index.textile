---
layout: page
title: Welcome to Vanity
---

"Vanity":http://github.com/assaf/vanity is an Experiment Driven Development framework for Rails.

!http://farm3.static.flickr.com/2540/4099665871_497f274f68_o.jpg!

Requires Ruby 1.9.1 or later, Redis 1.0 or later.


h2. A/B Testing with Rails (in 5 easy steps)

1. Add Vanity to your Rails app:

<pre>
class ApplicationController < ActionController::Base
  use_vanity :current_user
end
</pre>

2. Define an A/B test.  This test compares three pricing options:

<pre>
experiment "Price options" do
  description "Mirror, mirror on the wall, who's the better price of them all?"
  alternatives 19, 25, 29
end
</pre>

3. Present different options to the user:

<pre>
<h2>Get started for only $<%= ab_test :pricing_options %> a month!</h2>
</pre>

4. Measure conversion:

<pre>
class SignupController < ApplicationController
  def signup
    @account = Account.new(params[:account])
    if @account.save
      ab_goal! :pricing_options # <- conversion
      redirect_to @acccount
    else
      render action: :offer
    end
  end
end
</pre>

5. Check the report:

<pre>
vanity --output vanity.html
</pre>


h2. A/B Tests

Each A/B experiment represents several (two or more) alternatives.  Use the ab_test method to choose an alternative. Call ab_test without a block to return the value of the chosen alternative.  Call ab_test with a block to yield with the value.

Here are some examples:

<pre>
def index
  if ab_test(:new_page) # classic false/true test
    render action: "new_page"
  else
    render action: "index"
  end
end
</pre>
    
<pre>
def index
  # alternatives are names of templates 
  render template: ab_test(:new_page)
end
</pre>
   
<pre>
<%= if ab_test(:banner) %>100% less complexity!<% end %>
</pre>
  
<pre>
<%= ab_test(:greeting) %> <%= current_user.name %>
</pre>
   
<pre>
<% ab_test :features do |count| %>
  <%= count %> features to choose from!
<% end %>
</pre>

To measure conversion, call ab_goal! with the experiment's name.  Typically, you would do that from a controller action, for example:

<pre>
def create
  ab_goal! :new_page
  ...
end
</pre>

To measure conversion, simply call ab_goal! with the experiment name.  From the Vanity identity set by the filter we know which alternative was presented by ab_test, and can correlate conversions to alternative.  It's that simple!


h2. Managing Identity

For effective A/B tests, you want to:
- Randomly show different alternatives to different people
- Consistently show the same alternatives to the same person
- Know which alternative caused a conversion
- When running multiple tests at once, keep them independent

If you don't use any other mechanism, Vanity will assign a random value to a persistent cookie and use it to track the same visitor on subsequent visits.  Cookie tracking is enabled by use_vanity.

If you keep track of users, you would want to use the user's identity instead.  Using user identity is more reliable than a cookie tied to a single Web browser.

To do that, call use_vanity with the name of a method which returns an object with the desired id attribute.  Alternatively, you can use a proc.  These two examples are equivalent:

<pre>
use_vanity :current_user
use_vanity { |controller| controller.current_user.id }
</pre>

There are times when you would want to use a different identity to distinguish test alternatives.  For example, your application may have groups and you may want to A/B test an option that will be available (or not) to all people in the same group.

You can tell Vanity to use a different identity on a particular controller using use_vanity.  Alternatively, you can configure the experiment to extract the identity.  The following example will apply to all controllers that have a project attribute (without affecting other experiments):

<pre>
example "New feature" do
  description "New feature only available to some groups"
  identify { |controller| controller.project.id }
end
</pre>


h2. Configuring Vanity

Vanity will work out of the box on a default configuration.  Assuming you're using Redis on localhost, post 6379, there's nothing special to do.

If you run a different setup, use the playground object to configure Vanity.  For example:

<pre>
Vanity.playground.host = "redis.local"
Vanity.playground.password = "supersecret"
</pre>


h2. Credits

EDD was all "Nathaniel Talbott's":http://blog.talbott.ws/ idea, I had experiments to finish for "Apartly":http://apartly.com, there was coffee involved and out came the idea for Vanity.

First experiment, A/B tests, heavily influenced by Patrick McKenzie's awesome "A/Bingo":http://www.bingocardcreator.com/abingo.

Pain points courtesy of Google Analytics's stylish graphs and too-many-clicks goal tracking process.

And let's not forget Steven Blank's "The Four Steps to the Epiphany":http://www.amazon.com/gp/product/0976470705?ie=UTF8&tag=labnotes-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0976470705.

Copyright (C) 2009 Assaf Arkin, released under the "MIT license":http://github.com/assaf/necktie/blob/master/MIT-LICENSE.
