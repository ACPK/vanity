---
layout: page
title: Metrics
---

A good starting point for improving -- on anything -- is measuring.  Vanity allows you to measure multiple metrics, best way to tell how well your experiments are doing.

<blockquote>
"Startup metrics for pirates: AARRR!":http://500hats.typepad.com/500blogs/2007/09/startup-metrics.html
# Acquisition
# Activation
# Retention
# Referral
# Revenue
</blockquote>


h3.  Defining a Metric

Vanity always loads metrics defined in the @experiments/metrics@ directory.  A metric definition is a Ruby file that looks like this:

<pre>
metric "Signup" do
  description "Measures how many people signed up for our awesome service."
end
</pre>

The metric name shows up in the dashboard/report.  Vanity matches the metric name, identifier and file name[1].  You can see how the three relate in this table:

|_. Name       |_. ID          |_. Filename                          |
| Signups      | :signups      | experiments/metrics/signups.rb      |
| Yawns/sec    | :yawns_sec    | experiments/metrics/yawns_sec.rb    |
| Cheers a day | :cheers_a_day | experiments/metrics/cheers_a_day.rb |

There's also an optional description if you need to go into more details.

Once you have your metric, feed it data by calling the @track!@ method.  For example:

<pre>
class AccountsController < ApplicationController

  def create
    @person = Person.new(params[:person])
    if @person.save
      track! :signup      # track successful sign up
      UserSession.create person
      redirect_to root_url
    else
      render :action=>:new
    end
  end

end
</pre>

Define, track, that's about all you need to know.


h3.  How Metrics Work

The example above uses the @Vanity::Metric@ implementation. Each time you call @track!@ it increases that day's count.

Vanity stores each day's count in a separate key/value pair in the Redis database.  To generate a report it calls the @values@ method that pulls all these counts and uses them to draw pretty charts.

You can call @track!@ with a value and it will increase the day's count by that value.  For example, you can track how many products are bought each day by calling @track!@ with the number of items in the shopping cart.  For convenience, if you call @track!@ with zero or negative number, nothing happens.

Metrics also support hooks.  "A/B tests":ab_testing.html use hooks to manage their own book keeping whenever a metric gets updated.  Whenever you define an A/B experiment, you tell it which metrics to use, and it hooks into them using the @hook@ method.

This is all handled by the @Vanity::Metric@ implementation.  What if you already have the data available in your database or some other system?  In that case you might want to tweak the default implementation, or write your own.


h3.  Writing Your Own Metrics

Metric data can come from different sources: database queries, log files, Google Analytics, etc.  To use external sources you have to write your own metric implementation.

A metric must implement two methods.  The first method, @name@ returns the metric's name, which will show up in the dashboard/report.  The second method, @values@ receives a start date and end date and returns an array of values for all dates in that range (inclusive).

All other methods are optional, you decide whether or not to implement them.  The other methods are:

@description@ -- Returns human readable description.
@bounds@ -- Returns acceptable upper and lower bounds (@nil@ if unknown).
@hook@ -- "A/B tests":ab_testing.html use this to manage their own book keeping.

The API is kept simple enough that you can easily write your own metrics.  For example:

<pre>
# Our metric class, based on an AR model
class ActiveRecord::Metric
  def initialize(name, model, column)
    @name, @model, @column = name, model, column
  end

  attr_reader :name

  def values(start, end)
    @model.sum @column, :conditions=>{ :created_at=>start..end },
      :group=>:created_at
  end
end

# Generate metric directly from model.
class ActiveRecord::Base
  def self.metric(column)
    ActiveRecord::Metric.new(human_attribute_name(column), self, column)
  end
end
</pre>

You can also extend @Vanity::Metric@.  Here's an example that extends the base metric definition, so you can easily integrate it with ActiveRecord[2]:

<pre>
class Vanity::Metric
  # Use this to associate your metric with an ActiveRecord model.
  def model(name)
    name.after_create do
      track!
    end
  end
</pre>

And you would use it like this:

<pre>
metric "Signup" do
  model Person
end
</pre>

If you wrote your own metric implementation, please consider contributing it to Vanity so we can all benefit from it.  Thanks.


h3.  Metrics That Work

How about some tips & tricks for getting the most out of metrics (you might call them "best practices")?  Got any to share?



fn1.  When Vanity loads metrics from the @experiments/metrics@ directory, it determines the metric identifier from the file name, and makes sure the identifier and name match.  There are other ways to define metrics that don't have this limitation.

fn2.  This example is a bit short of being fully functional, but something along these lines will show up in a coming release.
